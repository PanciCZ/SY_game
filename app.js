// base app bootstrap placeholder
const state={img:null,graph:{nodes:[],edges:[]},showEdges:true,showNodes:true,showLabels:true,scale:1,panX:0,panY:0,dpi:window.devicePixelRatio||1};const canvas=document.getElementById('board');const ctx=canvas.getContext('2d',{alpha:false});function fitToScreen(){const r=canvas.getBoundingClientRect(),d=state.dpi;const w=Math.max(1,Math.floor(r.width*d)),h=Math.max(1,Math.floor(r.height*d));if(canvas.width!==w||canvas.height!==h){canvas.width=w;canvas.height=h;}draw()}window.addEventListener('resize',fitToScreen);async function loadDefaults(){try{const[img,graph]=await Promise.all([loadImage('assets/board.png'),fetch('assets/sy_nodes_edges.json').then(r=>r.json())]);state.img=img;state.graph=normalizeGraph(graph);centerAndFit();draw();}catch(e){console.warn(e)}finally{fitToScreen()}}function normalizeGraph(g){const nodes=(g.nodes||[]).map(n=>({id:n.id??n.node??n.name,x:Number(n.x),y:Number(n.y),label:String(n.label??n.id??n.node??'')}));const edges=(g.edges||g.links||[]).map(e=>({from:e.from??e.source??e.u,to:e.to??e.target??e.v,type:String(e.type??e.transport??'').toLowerCase()}));return{nodes,edges}}function loadImage(src){return new Promise((res,rej)=>{const img=new Image();img.onload=()=>res(img);img.onerror=rej;img.src=src;})}document.getElementById('reset').addEventListener('click',()=>{centerAndFit();draw()});document.getElementById('toggleEdges').addEventListener('click',()=>{state.showEdges=!state.showEdges;draw()});document.getElementById('toggleNodes').addEventListener('click',()=>{state.showNodes=!state.showNodes;draw()});document.getElementById('toggleLabels').addEventListener('click',()=>{state.showLabels=!state.showLabels;draw()});document.getElementById('fileJson')?.addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;const t=await f.text();state.graph=normalizeGraph(JSON.parse(t));centerAndFit();draw()});document.getElementById('fileImg')?.addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;const url=URL.createObjectURL(f);state.img=await loadImage(url);centerAndFit();draw()});canvas.addEventListener('wheel',e=>{e.preventDefault();const rect=canvas.getBoundingClientRect();const sx=e.clientX-rect.left,sy=e.clientY-rect.top;const before={x:(sx-state.panX)/state.scale,y:(sy-state.panY)/state.scale};state.scale*=Math.pow(1.0015,-e.deltaY);state.scale=Math.max(0.2,Math.min(8,state.scale));const after={x:(sx-state.panX)/state.scale,y:(sy-state.panY)/state.scale};state.panX+=(after.x-before.x)*state.scale;state.panY+=(after.y-before.y)*state.scale;draw()},{passive:false});function centerAndFit(){const rect=canvas.getBoundingClientRect();if(!state.img){state.scale=1;state.panX=rect.width/2;state.panY=rect.height/2;return}const sx=rect.width/state.img.width,sy=rect.height/state.img.height;state.scale=Math.min(sx,sy)*0.95;state.panX=(rect.width-state.img.width*state.scale)/2;state.panY=(rect.height-state.img.height*state.scale)/2}function draw(){const d=state.dpi;ctx.setTransform(1,0,0,1,0,0);ctx.fillStyle='#0b0f14';ctx.fillRect(0,0,canvas.width,canvas.height);ctx.save();ctx.scale(d,d);ctx.translate(state.panX,state.panY);ctx.scale(state.scale,state.scale);if(state.img)ctx.drawImage(state.img,0,0);if(state.showEdges){ctx.lineCap='round';for(const e of state.graph.edges){const a=state.graph.nodes.find(n=>String(n.id)===String(e.from));const b=state.graph.nodes.find(n=>String(n.id)===String(e.to));if(!a||!b)continue;ctx.strokeStyle=e.type==='taxi'?'#f4d03f':(e.type==='bus'?'#2ecc71':(e.type==='metro'?'#e74c3c':'#95a5a6'));ctx.lineWidth=3;ctx.beginPath();ctx.moveTo(a.x,a.y);ctx.lineTo(b.x,b.y);ctx.stroke()}}if(state.showNodes){for(const n of state.graph.nodes){ctx.beginPath();ctx.arc(n.x,n.y,7,0,Math.PI*2);ctx.fillStyle='#eaeff4';ctx.strokeStyle='#11161d';ctx.lineWidth=2;ctx.fill();ctx.stroke();if(state.showLabels){ctx.font='bold 16px system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif';ctx.textAlign='center';ctx.textBaseline='top';ctx.fillStyle='#ffffff';ctx.strokeStyle='rgba(0,0,0,0.6)';ctx.lineWidth=3;const tx=Math.round(n.x),ty=Math.round(n.y+9);const label=String(n.label??n.id);ctx.strokeText(label,tx,ty);ctx.fillText(label,tx,ty)}}}ctx.restore()}loadDefaults();fitToScreen();
// Rule engine & logging (see previous cell for details simplified)
const RULES={roundsMax:22,revealTurns:[3,8,13,18,24],detectives:{taxi:11,bus:8,metro:4},mrX:{black:5,double:2},allowThirdDouble:false};
const game={turn:1,mrxMoves:[],dets:{D1:{pos:null,t:{...RULES.detectives}},D2:{pos:null,t:{...RULES.detectives}},D3:{pos:null,t:{...RULES.detectives}},D4:{pos:null,t:{...RULES.detectives}},D5:{pos:null,t:{...RULES.detectives}}},police:{P1:{enabled:false,pos:null},P2:{enabled:false,pos:null}},occupied:new Set(),started:false,ended:false};
function setModeUI(){const m=document.querySelector('input[name="mode"]:checked').value;document.getElementById('mrXControls').style.display=m==='mrX'?'':'none';document.getElementById('detControls').style.display=m==='detectives'?'':'none'};document.querySelectorAll('input[name="mode"]').forEach(r=>r.addEventListener('change',setModeUI));setModeUI();
function addLog(t,c=''){const d=document.createElement('div');d.className='entry '+c;d.innerHTML=t;document.getElementById('log').prepend(d)}
function idToNode(id){return state.graph.nodes.find(n=>String(n.id)===String(id))}
function edgeExists(a,b,type){return state.graph.edges.some(e=>{const from=String(e.from),to=String(e.to),t=String(e.type).toLowerCase();const aa=String(a),bb=String(b);return(((from===aa&&to===bb)||(from===bb&&to===aa))&&(t===type||(type==='black'&&(t==='taxi'||t==='bus'||t==='metro'||t==='ferry'))))})}
function stationOccupied(s){return game.occupied.has(String(s))}function occupy(s){game.occupied.add(String(s))}function vacate(s){game.occupied.delete(String(s))}
document.getElementById('nodeDetails').insertAdjacentHTML('beforeend','<div id="setupHint" class="warn">Tip: V režimu Detektivové klikni na uzly a nastav start D1..D5 / Police.</div>');
function refreshTicketPanels(){document.getElementById('mrxTicketsLeft').textContent=`Mister X: black ${RULES.mrX.black}, double ${RULES.mrX.double}`;const sel=document.getElementById('activeDetective').value;const t=game.dets[sel].t;document.getElementById('detTicketsLeft').textContent=`${sel}: taxi ${t.taxi}, bus ${t.bus}, metro ${t.metro}`}
refreshTicketPanels();
['usePolice1','usePolice2'].forEach(id=>{document.getElementById(id).addEventListener('change',e=>{const key=id==='usePolice1'?'P1':'P2';game.police[key].enabled=e.target.checked;addLog(`Police ${key} ${e.target.checked?'zapnuta':'vypnuta'}.`,'ok')})});
canvas.addEventListener('click',e=>{const mode=document.querySelector('input[name="mode"]:checked').value;if(game.started||mode!=='detectives')return;const rect=canvas.getBoundingClientRect();const p={x:(e.clientX-rect.left-state.panX)/state.scale,y:(e.clientY-rect.top-state.panY)/state.scale};let best=null,bd=1e9;for(const n of state.graph.nodes){const d=Math.hypot(n.x-p.x,n.y-p.y);if(d<bd){bd=d;best=n}}if(!best||bd>25/state.scale)return;const sel=document.getElementById('activeDetective').value;if(stationOccupied(best.id)){addLog(`Stanice ${best.label||best.id} je obsazená.`,'err');return}const prev=game.dets[sel].pos;if(prev)vacate(prev);game.dets[sel].pos=best.id;occupy(best.id);addLog(`${sel} start → ${best.label||best.id}`,'ok');draw()});
document.getElementById('mrxCommit').addEventListener('click',()=>{if(game.ended)return;game.started=true;const ticket=document.getElementById('mrxTicket').value;let to=parseInt(document.getElementById('mrxDest').value,10);const dbl=document.getElementById('mrxDouble').checked;if(Number.isNaN(to)){addLog('Zadej cíl pro Mister X.','err');return}const last=game.mrxMoves.length?game.mrxMoves[game.mrxMoves.length-1].to:null;if(last&&ticket!=='black'&&!edgeExists(last,to,ticket)){addLog(`Neplatná hrana ${last} → ${to} pro ${ticket}.`,'err');return}if(ticket==='black'){if(RULES.mrX.black<=0){addLog('Mister X už nemá black.','err');return}RULES.mrX.black--}if(dbl){if(RULES.mrX.double<=0){addLog('Mister X už nemá double.','err');return}RULES.mrX.double--;const to2=prompt('Druhý cíl:');const t2=(prompt('Druhá jízdenka (taxi/bus/metro/black):','taxi')||'').toLowerCase();const to2n=parseInt(to2||'',10);if(!to2n||!['taxi','bus','metro','black'].includes(t2)){addLog('Neplatný druhý tah.','err');return}if(t2!=='black'&&!edgeExists(to,to2n,t2)){addLog('Neplatná druhá hrana.','err');return}if(t2==='black'){if(RULES.mrX.black<=0){addLog('Mister X už nemá black pro druhý tah.','err');return}RULES.mrX.black--}game.mrxMoves.push({turn:game.turn,ticket, to});game.mrxMoves.push({turn:game.turn,ticket:t2,to:to2n});const mc=game.mrxMoves.length;if(RULES.revealTurns.includes(mc-1))addLog(`Odhalení: ${to}`,'warn');}else{game.mrxMoves.push({turn:game.turn,ticket,to})}const mc=game.mrxMoves.length;if(RULES.revealTurns.includes(mc))addLog(`Odhalení po ${mc}. tahu: <strong>${game.mrxMoves[mc-1].to}</strong>`,'ok');else addLog(`Mister X ${ticket} → ?`,'ok');refreshTicketPanels()});
document.getElementById('detCommit').addEventListener('click',()=>{if(!game.started||game.ended)return;const who=document.getElementById('activeDetective').value;const ttype=document.getElementById('detTicket').value;const to=parseInt(document.getElementById('detDest').value,10);if(Number.isNaN(to)){addLog('Zadej cílovou stanici detektiva.','err');return}const det=game.dets[who];if(!det.pos){addLog(`${who} nemá start.`,'err');return}if(det.t[ttype]<=0){addLog(`${who} nemá jízdenky na ${ttype}.`,'err');return}if(stationOccupied(to)){addLog(`Stanice ${to} je obsazená.`, 'err');return}if(!edgeExists(det.pos,to,ttype)){addLog(`Neplatná hrana ${det.pos} → ${to} pro ${ttype}.`,'err');return}vacate(det.pos);det.pos=to;occupy(to);det.t[ttype]--;addLog(`${who} ${ttype} → ${to}`,'ok');refreshTicketPanels()});
document.getElementById('prevTurn').addEventListener('click',()=>{if(game.turn>1)game.turn--;addLog(`Kolo ${game.turn}`)});
document.getElementById('nextTurn').addEventListener('click',()=>{if(game.turn<RULES.roundsMax)game.turn++;else addLog('Dosažen limit 22 kol.','warn');addLog(`Kolo ${game.turn}`)});
document.getElementById('exportLog').addEventListener('click',()=>{const data={version:1,rules:RULES,game:game,timestamp:new Date().toISOString()};const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='scotlandyard_game_log.json';a.click();URL.revokeObjectURL(url);addLog('Export hotov.','ok')});
document.getElementById('importLog').addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;try{const t=await f.text();const data=JSON.parse(t);Object.assign(RULES,data.rules||{});Object.assign(game,data.game||{});game.occupied=new Set();for(const k of Object.keys(game.dets)){if(game.dets[k].pos)occupy(game.dets[k].pos)}addLog('Import hotov.','ok');refreshTicketPanels();draw()}catch{addLog('Import selhal.','err')}});
